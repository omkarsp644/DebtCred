package com.omsoftonics.debtcred.helper;

import android.content.ActivityNotFoundException;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.graphics.pdf.PdfDocument;
import android.net.Uri;
import android.os.Environment;
import android.widget.Toast;

import com.omsoftonics.debtcred.BuildConfig;
import com.omsoftonics.debtcred.MainActivity;
import com.omsoftonics.debtcred.R;
import com.omsoftonics.debtcred.adapter.DisplayExpenseRecordsAdapter;
import com.omsoftonics.debtcred.model.MoneyInformation;
import com.omsoftonics.debtcred.model.Record;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.FileProvider;


import static com.omsoftonics.debtcred.MainActivity.RECORD_TYPE_EXPENSE;
import static com.omsoftonics.debtcred.MainActivity.RECORD_TYPE_INCOME;
import static com.omsoftonics.debtcred.MainActivity.currentInformation;
import static com.omsoftonics.debtcred.model.MoneyInformation.GetCurrentdate;


public class PrintPDFInformation {


    public int PAGE_WIDTH=1200;
    public int PAGE_HEIGHT=2010;
    AppCompatActivity context;

    int Income=0;
    int Expense=0;
    int Balance=0;
    public PrintPDFInformation(AppCompatActivity activity) {
        this.context=activity;
    }


    public void printToPdf(MoneyInformation eventInformation) throws IOException {

        String pdfPath= Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS).toString();

        File file=new File(pdfPath,"DebtCred_"+GetCurrentdate().replace('/','_')+".pdf");


        OutputStream outputStream=new FileOutputStream(file);


        PdfDocument myPdfDocument=new PdfDocument();




        //page 1
        PdfDocument.PageInfo myPageInfo1=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,1).create();
        PdfDocument.Page myPage1= myPdfDocument.startPage(myPageInfo1);
        Canvas canvas=myPage1.getCanvas();

        // Page


        Paint titlePaint=new Paint();

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
        titlePaint.setTextSize(60);
        canvas.drawText("DEBT CRED MANAGER",PAGE_WIDTH/2,PAGE_HEIGHT/2,titlePaint);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(50);
        canvas.drawText("Report",PAGE_WIDTH/2,PAGE_HEIGHT/2+90,titlePaint);



        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        canvas.drawText("Generated By DebtCred Android App",PAGE_WIDTH/2,PAGE_HEIGHT/2+170,titlePaint);
        titlePaint.setTextSize(30);

        canvas.drawText("Om Softonics",PAGE_WIDTH/2,PAGE_HEIGHT-100,titlePaint);



        Bitmap icon = BitmapFactory.decodeResource(context.getResources(),R.drawable.debtcred);
        icon=Bitmap.createScaledBitmap(icon, 800, 600, false);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(50);
        canvas.drawBitmap(icon,PAGE_WIDTH/2-400,200,titlePaint);


        myPdfDocument.finishPage(myPage1);




        //page 2
        PdfDocument.PageInfo myPageInfo2=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,2).create();
        PdfDocument.Page myPage2= myPdfDocument.startPage(myPageInfo2);
        Canvas canvas2=myPage2.getCanvas();

        // Page

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(50);
        canvas2.drawText("Your DebtCred Report : ",PAGE_WIDTH/2-300,200,titlePaint);






        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        titlePaint.setColor(context.getResources().getColor(R.color.greenRec));
        canvas2.drawText("Income : "+(eventInformation.getIncome_Total()),PAGE_WIDTH/2-350,400,titlePaint);


        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        titlePaint.setColor(context.getResources().getColor(R.color.lightblue));
        canvas2.drawText("Balance : "+currentInformation.getBalance(),PAGE_WIDTH/2-350,500,titlePaint);



        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        titlePaint.setColor(context.getResources().getColor(R.color.redRec));
        canvas2.drawText("Expense : "+eventInformation.getExpense_Total(),PAGE_WIDTH/2-380,600,titlePaint);


        titlePaint.setColor(context.getResources().getColor(R.color.black));



        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(80);
        canvas2.drawText("Record List",PAGE_WIDTH/2,1000,titlePaint);









        int consts=150;

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        canvas2.drawText("Comment ",PAGE_WIDTH/4*0+consts,1200,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        canvas2.drawText("Date",PAGE_WIDTH/4*1+consts,1200,titlePaint);


        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        canvas2.drawText("Income",PAGE_WIDTH/4*2+consts,1200,titlePaint);


        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        canvas2.drawText("Expense",PAGE_WIDTH/4*3+consts,1200,titlePaint);





        PdfDocument.PageInfo tempPage=null;
        PdfDocument.Page myTempPage= myPage2;
        Canvas tempCanvas=canvas2;


        int currentY=1300;
        int current_Page=3;


        for (Record v:eventInformation.getRecord_List()){

            if(currentY>=PAGE_HEIGHT-100){
                currentY=100;
                myPdfDocument.finishPage(myTempPage);
                tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
                myTempPage= myPdfDocument.startPage(tempPage);
                tempCanvas=myTempPage.getCanvas();
            }
            else{
                currentY+=50;
            }



            boolean isIncome=false;

            if (v.getRecordType()==RECORD_TYPE_EXPENSE){
                titlePaint.setColor(context.getResources().getColor(R.color.redRec));
            }
            else{
                isIncome=true;
                titlePaint.setColor(context.getResources().getColor(R.color.greenRec));

            }



            String s=v.getComment();
            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            tempCanvas.drawText(""+s,PAGE_WIDTH/4*0+consts,currentY,titlePaint);

             s=v.getDate();
            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            tempCanvas.drawText(""+s,PAGE_WIDTH/4*1+consts,currentY,titlePaint);





            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            tempCanvas.drawText(""+(isIncome?v.getAmount():"-"),PAGE_WIDTH/4*2+consts,currentY,titlePaint);


            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            tempCanvas.drawText(""+(isIncome?"-":v.getAmount()),PAGE_WIDTH/4*3+consts,currentY,titlePaint);

            titlePaint.setColor(context.getResources().getColor(android.R.color.black));



        }

        titlePaint.setColor(context.getResources().getColor(android.R.color.black));

        currentY+=50;
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
        if(currentY<=PAGE_HEIGHT-100){
            tempCanvas.drawLine(50,currentY,PAGE_WIDTH-40,currentY,titlePaint);
        }

        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));

        currentY+=100;


        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(30);
        tempCanvas.drawText("Total : ",PAGE_WIDTH/4*1+consts,currentY,titlePaint);


        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(30);
        titlePaint.setColor(context.getResources().getColor(R.color.greenRec));
        tempCanvas.drawText(""+currentInformation.getIncome_Total(),PAGE_WIDTH/4*2+consts,currentY,titlePaint);


        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(30);
        titlePaint.setColor(context.getResources().getColor(R.color.redRec));
        tempCanvas.drawText(""+currentInformation.getExpense_Total(),PAGE_WIDTH/4*3+consts,currentY,titlePaint);

        titlePaint.setColor(context.getResources().getColor(android.R.color.black));



//
//        currentY+=50;
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        if(currentY<=PAGE_HEIGHT-100){
//            tempCanvas.drawText("",PAGE_WIDTH/4*1+consts,currentY,titlePaint);
//            tempCanvas.drawText(""+totalVarganiCollected,PAGE_WIDTH/4*3+consts,currentY,titlePaint);
//        }
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//
//
//
//        currentY+=20;
//
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        if(currentY<=PAGE_HEIGHT-100){
//            tempCanvas.drawLine(50,currentY+20,PAGE_WIDTH-50,currentY+20,titlePaint);
//        }
//
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//
//
//        currentY+=70;
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        if(currentY<=PAGE_HEIGHT-100){
//            tempCanvas.drawText("Vargani Yet To Collect ",PAGE_WIDTH/4*1+consts,currentY,titlePaint);
//            tempCanvas.drawText(""+totalVarganiYetToCome,PAGE_WIDTH/4*3+consts,currentY,titlePaint);
//        }
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//
//        currentY+=20;
//
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
//        if(currentY<=PAGE_HEIGHT-100){
//            tempCanvas.drawLine(50,currentY+20,PAGE_WIDTH-50,currentY+20,titlePaint);
//        }
//
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//
//
//
//
//
//        myPdfDocument.finishPage(myTempPage);
//        tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
//        myTempPage= myPdfDocument.startPage(tempPage);
//        tempCanvas=myTempPage.getCanvas();


//
//        titlePaint.setColor(context.getResources().getColor(android.R.color.black));
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(100);
//        tempCanvas.drawText("Expense List",PAGE_WIDTH/2,100,titlePaint);
//
//
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(50);
//        tempCanvas.drawText("Date",0+consts,300,titlePaint);
//
//
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(50);
//        tempCanvas.drawText("Expense For",PAGE_WIDTH/4*1+consts,300,titlePaint);
//
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(50);
//        tempCanvas.drawText("Given To",PAGE_WIDTH/4*2+consts,300,titlePaint);
//
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(50);
//        tempCanvas.drawText("Amount",PAGE_WIDTH/4*3+consts,300,titlePaint);
//
//
//
//        currentY=400;
//
//
//        for (Expanditures v:eventInformation.getExpanditures()){
//
//            if(currentY>=PAGE_HEIGHT-100){
//                currentY=100;
//                myPdfDocument.finishPage(myTempPage);
//                tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
//                myTempPage= myPdfDocument.startPage(tempPage);
//                tempCanvas=myTempPage.getCanvas();
//            }
//            else{
//                currentY+=50;
//            }
//            totalExpenseDone+=v.getAmount();
//
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getDate(),0+consts,currentY,titlePaint);
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getGivenFor(),PAGE_WIDTH/4*1+consts,currentY,titlePaint);
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getGivenTo(),PAGE_WIDTH/4*2+consts,currentY,titlePaint);
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getAmount(),PAGE_WIDTH/4*3+consts,currentY,titlePaint);
//
//        }
//
//
//        currentY+=20;
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
//        if(currentY<=PAGE_HEIGHT-100){
//            tempCanvas.drawLine(50,currentY,PAGE_WIDTH-50,currentY,titlePaint);
//        }
//
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//
//
//
//        currentY+=70    ;
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        if(currentY<=PAGE_HEIGHT-100){
//            tempCanvas.drawText("Expense Money  ",PAGE_WIDTH/4*1+consts,currentY,titlePaint);
//            tempCanvas.drawText(""+totalExpenseDone,PAGE_WIDTH/4*3+consts,currentY,titlePaint);
//        }
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        myPdfDocument.finishPage(myTempPage);
//
//
//        currentY=100;
//        tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
//        myTempPage= myPdfDocument.startPage(tempPage);
//        tempCanvas=myTempPage.getCanvas();
//
//        titlePaint.setTextSize(70);
//        tempCanvas.drawText("Day Wise Vargani Collection...",PAGE_WIDTH/2,currentY,titlePaint);
//
//        currentY+=20;
//        tempCanvas.drawLine(100,currentY,PAGE_WIDTH-100,currentY,titlePaint);
//
//
//        currentY+=100;
//
//
//
//
//
//        // Day Wise Vargani Display
//
//        Map<Date, Datad> m = new HashMap<Date, Datad>();
//        SimpleDateFormat er = new SimpleDateFormat("dd/MM/yyyy");
//        for (Record v: eventInformation.getVarganiList()) {
//            try {
//
//                Date d=er.parse(v.getDateCreated());
//                ;
//                if(!m.containsKey(d)){
//                    Datad o=new Datad();
//                    o.AmountVarganiRecieptGiven=0;
//                    o.AmountVarganiRecieptGivenPaid=0;
//                    o.AmountVarganiRecieptGivenUnpaid=0;
////                    o.previousVarganiCollected=0;
//
//                    m.put( d, o);
//                }
//                Datad deo=m.get(d);
//
//                deo.AmountVarganiRecieptGiven+=v.getAmount();
//                if(v.getDatePaid()!=null && v.getDatePaid().equals(er.format(d))){
//                    deo.AmountVarganiRecieptGivenPaid+=v.getAmount();
//                }
//                else if(v.getDatePaid()==null){
//                    deo.AmountVarganiRecieptGivenUnpaid+=v.getAmount();
//                }
//
//
//
//
//                m.put( d, deo);
//
//            } catch (Exception e) {
//
//
//            }
//        }
//        Map<Date, Datad> m1 = new TreeMap(m);
//
//
//        ArrayList<String> xAxis=new ArrayList<>();
//        ArrayList<Integer> yAxis=new ArrayList<>();
//
//
//
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(20);
//        tempCanvas.drawText("Date",consts,currentY,titlePaint);
//
//
//        consts-=30;
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(20);
//        tempCanvas.drawText("Vargani Reciept of Cost",PAGE_WIDTH/5*1+consts,currentY,titlePaint);
//
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(20);
//        tempCanvas.drawText("Vargani Paid Today",PAGE_WIDTH/5*2+consts,currentY,titlePaint);
//
//        titlePaint.setTextAlign(Paint.Align.CENTER);
//        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
//        titlePaint.setTextSize(20);
//        tempCanvas.drawText("Vargani Pending Today",PAGE_WIDTH/5*3+consts,currentY,titlePaint);
//
////
////        titlePaint.setTextAlign(Paint.Align.CENTER);
////        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF,Typeface.NORMAL));
////        titlePaint.setTextSize(20);
////        tempCanvas.drawText("Pending Vargani Collected",PAGE_WIDTH/5*4+consts,currentY,titlePaint);
//
//
//
//
//
//
//        for (Map.Entry<Date, Datad> v : m1.entrySet())
//        {
//            if(currentY>=PAGE_HEIGHT-100){
//                currentY=100;
//                myPdfDocument.finishPage(myTempPage);
//                tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
//                myTempPage= myPdfDocument.startPage(tempPage);
//                tempCanvas=myTempPage.getCanvas();
//            }
//            else{
//                currentY+=70;
//            }
//
//
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+er.format(v.getKey()),consts,currentY,titlePaint);
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getValue().AmountVarganiRecieptGiven,PAGE_WIDTH/5*1+consts,currentY,titlePaint);
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getValue().AmountVarganiRecieptGivenPaid,PAGE_WIDTH/5*2+consts,currentY,titlePaint);
//
//
//            titlePaint.setTextAlign(Paint.Align.CENTER);
//            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
//            titlePaint.setTextSize(30);
//            tempCanvas.drawText(""+v.getValue().AmountVarganiRecieptGivenUnpaid,PAGE_WIDTH/5*3+consts,currentY,titlePaint);
//
//
////            titlePaint.setTextAlign(Paint.Align.CENTER);
////            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF,Typeface.BOLD));
////            titlePaint.setTextSize(30);
////            tempCanvas.drawText(""+v.getValue().previousVarganiCollected,PAGE_WIDTH/5*4+consts,currentY,titlePaint);
//
//
//
//
//
//        }
//
        // Day Wise Expanditure Display


        class DisplayIncomeExpensePerDay{
            int Income;
            int Expense;
            String Date;

            public DisplayIncomeExpensePerDay(int income, int expense, String date) {
                Income = income;
                Expense = expense;
                Date = date;
            }

            public DisplayIncomeExpensePerDay(String Date) {
                this.Income=0;
                this.Expense=0;
                this.Date=Date;
            }
        }


        // Day Wise
        HashMap<Date, DisplayIncomeExpensePerDay> df = new HashMap<Date, DisplayIncomeExpensePerDay>();
        SimpleDateFormat er = new SimpleDateFormat("dd/MM/yyyy");
        for (Record v: eventInformation.getRecord_List()) {
            try {

                DisplayIncomeExpensePerDay demo=null;
                Date d=er.parse(v.getDate());
                if(df.containsKey(d)){
                    demo=df.get(d);
                }
                else{
                    demo= new DisplayIncomeExpensePerDay(v.getDate());
                }

                if (v.getRecordType()==RECORD_TYPE_EXPENSE){
                    demo.Expense+=v.getAmount();
                }
                if (v.getRecordType()==RECORD_TYPE_INCOME){
                    demo.Income+=v.getAmount();
                }


                df.put( d, demo);

            } catch (Exception e) {


            }
        }
       TreeMap m1 = new TreeMap(df);


        if(currentY>=PAGE_HEIGHT-100){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }
        else{
            currentY+=50;
        }

        currentY+=200;

        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(50);
        tempCanvas.drawText("Day Wise Income Expense Report",PAGE_WIDTH/2,currentY,titlePaint);

        currentY+=20;
        tempCanvas.drawLine(100,currentY,PAGE_WIDTH-100,currentY,titlePaint);


        currentY+=100;


        if(currentY>=PAGE_HEIGHT-200){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }





        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Date",PAGE_WIDTH/4*0+consts,currentY,titlePaint);



        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Income ",PAGE_WIDTH/4*1+consts,currentY,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Expense ",PAGE_WIDTH/4*2+consts,currentY,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Balance ",PAGE_WIDTH/4*3+consts,currentY,titlePaint);







        for (Map.Entry<Date, DisplayIncomeExpensePerDay> v : df.entrySet())
        {
            if(currentY>=PAGE_HEIGHT-100){
                currentY=100;
                myPdfDocument.finishPage(myTempPage);
                tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
                myTempPage= myPdfDocument.startPage(tempPage);
                tempCanvas=myTempPage.getCanvas();
            }
            else{
                currentY+=70;
            }



            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
            titlePaint.setTextSize(30);

            titlePaint.setColor(context.getResources().getColor(R.color.black));
            tempCanvas.drawText(""+er.format(v.getKey()),PAGE_WIDTH/4*0+consts,currentY,titlePaint);


            DisplayIncomeExpensePerDay d=df.get(v.getKey());

            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF,Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.greenRec));
            tempCanvas.drawText(""+d.Income,PAGE_WIDTH/4*1+consts,currentY,titlePaint);


            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.redRec));
            tempCanvas.drawText(""+d.Expense,PAGE_WIDTH/4*2+consts,currentY,titlePaint);

            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.lightblue));
            tempCanvas.drawText(""+(d.Income-d.Expense),PAGE_WIDTH/4*3+consts,currentY,titlePaint);


        }

        titlePaint.setColor(context.getResources().getColor(R.color.black));







        // Month Wise


        HashMap<String, DisplayIncomeExpensePerDay> dfs = new HashMap<String, DisplayIncomeExpensePerDay>();
        er = new SimpleDateFormat("dd/MM/yyyy");
        for (Record v: eventInformation.getRecord_List()) {
            try {

                DisplayIncomeExpensePerDay demo=null;
//                Date d=er.parse(v.getDate());


                String s= v.getDate().split("/")[1]+"-"+v.getDate().split("/")[2];
                if(df.containsKey(s)){
                    demo=dfs.get(s);
                }
                else{
                    demo= new DisplayIncomeExpensePerDay(v.getDate());
                }

                if (v.getRecordType()==RECORD_TYPE_EXPENSE){
                    demo.Expense+=v.getAmount();
                }
                if (v.getRecordType()==RECORD_TYPE_INCOME){
                    demo.Income+=v.getAmount();
                }


                dfs.put( s, demo);

            } catch (Exception e) {


            }
        }
        m1 = new TreeMap(dfs);


        if(currentY>=PAGE_HEIGHT-100){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }
        else{
            currentY+=50;
        }

        currentY+=200;

        if(currentY>=PAGE_HEIGHT-100){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }
        else{
            currentY+=50;
        }

        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(50);
        tempCanvas.drawText("Month Wise Income Expense Report",PAGE_WIDTH/2,currentY,titlePaint);

        currentY+=20;
        tempCanvas.drawLine(100,currentY,PAGE_WIDTH-100,currentY,titlePaint);


        currentY+=100;


        if(currentY>=PAGE_HEIGHT-200){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }






        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Month",PAGE_WIDTH/4*0+consts,currentY,titlePaint);



        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Income ",PAGE_WIDTH/4*1+consts,currentY,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Expense ",PAGE_WIDTH/4*2+consts,currentY,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Balance ",PAGE_WIDTH/4*3+consts,currentY,titlePaint);







        for (Map.Entry<Date, DisplayIncomeExpensePerDay> v : df.entrySet())
        {
            if(currentY>=PAGE_HEIGHT-100){
                currentY=100;
                myPdfDocument.finishPage(myTempPage);
                tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
                myTempPage= myPdfDocument.startPage(tempPage);
                tempCanvas=myTempPage.getCanvas();
            }
            else{
                currentY+=70;
            }



            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
            titlePaint.setTextSize(30);

            titlePaint.setColor(context.getResources().getColor(R.color.black));
            tempCanvas.drawText(""+er.format(v.getKey()),PAGE_WIDTH/4*0+consts,currentY,titlePaint);


            DisplayIncomeExpensePerDay d=df.get(v.getKey());

            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF,Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.greenRec));
            tempCanvas.drawText(""+d.Income,PAGE_WIDTH/4*1+consts,currentY,titlePaint);


            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.redRec));
            tempCanvas.drawText(""+d.Expense,PAGE_WIDTH/4*2+consts,currentY,titlePaint);

            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.lightblue));
            tempCanvas.drawText(""+(d.Income-d.Expense),PAGE_WIDTH/4*3+consts,currentY,titlePaint);


        }

        titlePaint.setColor(context.getResources().getColor(R.color.black));




                // YEAR Wise


        dfs = new HashMap<String, DisplayIncomeExpensePerDay>();
        er = new SimpleDateFormat("dd/MM/yyyy");
        for (Record v: eventInformation.getRecord_List()) {
            try {

                DisplayIncomeExpensePerDay demo=null;
//                Date d=er.parse(v.getDate());

                String s= v.getDate().split("/")[2];
                if(df.containsKey(s)){
                    demo=dfs.get(s);
                }
                else{
                    demo= new DisplayIncomeExpensePerDay(v.getDate());
                }

                if (v.getRecordType()==RECORD_TYPE_EXPENSE){
                    demo.Expense+=v.getAmount();
                }
                if (v.getRecordType()==RECORD_TYPE_INCOME){
                    demo.Income+=v.getAmount();
                }


                dfs.put( s, demo);

            } catch (Exception e) {


            }
        }
       m1 = new TreeMap(dfs);


        if(currentY>=PAGE_HEIGHT-100){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }
        else{
            currentY+=50;
        }

        currentY+=200;

        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(50);
        tempCanvas.drawText("Year Wise Income Expense Report",PAGE_WIDTH/2,currentY,titlePaint);

        currentY+=20;
        tempCanvas.drawLine(100,currentY,PAGE_WIDTH-100,currentY,titlePaint);


        currentY+=100;


        if(currentY>=PAGE_HEIGHT-200){
            currentY=100;
            myPdfDocument.finishPage(myTempPage);
            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
            myTempPage= myPdfDocument.startPage(tempPage);
            tempCanvas=myTempPage.getCanvas();
        }







        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Year",PAGE_WIDTH/4*0+consts,currentY,titlePaint);



        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Income ",PAGE_WIDTH/4*1+consts,currentY,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Expense ",PAGE_WIDTH/4*2+consts,currentY,titlePaint);

        titlePaint.setTextAlign(Paint.Align.CENTER);
        titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
        titlePaint.setTextSize(40);
        tempCanvas.drawText(" Balance ",PAGE_WIDTH/4*3+consts,currentY,titlePaint);







        for (Map.Entry<Date, DisplayIncomeExpensePerDay> v : df.entrySet())
        {
            if(currentY>=PAGE_HEIGHT-100){
                currentY=100;
                myPdfDocument.finishPage(myTempPage);
                tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
                myTempPage= myPdfDocument.startPage(tempPage);
                tempCanvas=myTempPage.getCanvas();
            }
            else{
                currentY+=70;
            }



            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.BOLD));
            titlePaint.setTextSize(30);

            titlePaint.setColor(context.getResources().getColor(R.color.black));
            tempCanvas.drawText(""+er.format(v.getKey()),PAGE_WIDTH/4*0+consts,currentY,titlePaint);


            DisplayIncomeExpensePerDay d=df.get(v.getKey());

            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF,Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.greenRec));
            tempCanvas.drawText(""+d.Income,PAGE_WIDTH/4*1+consts,currentY,titlePaint);


            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.redRec));
            tempCanvas.drawText(""+d.Expense,PAGE_WIDTH/4*2+consts,currentY,titlePaint);

            titlePaint.setTextAlign(Paint.Align.CENTER);
            titlePaint.setTypeface(Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL));
            titlePaint.setTextSize(30);
            titlePaint.setColor(context.getResources().getColor(R.color.lightblue));
            tempCanvas.drawText(""+(d.Income-d.Expense),PAGE_WIDTH/4*3+consts,currentY,titlePaint);


        }

        titlePaint.setColor(context.getResources().getColor(R.color.black));








//        currentY+=200;
//
//        if(currentY>=PAGE_HEIGHT-200){
//            currentY=100;
//            myPdfDocument.finishPage(myTempPage);
//            tempPage=new PdfDocument.PageInfo.Builder(PAGE_WIDTH,PAGE_HEIGHT,current_Page++).create();
//            myTempPage= myPdfDocument.startPage(tempPage);
//            tempCanvas=myTempPage.getCanvas();
//        }







        myPdfDocument.finishPage(myTempPage);









        try{

            myPdfDocument.writeTo(outputStream);

            //Toast.makeText(context,"Completed.1515..",Toast.LENGTH_SHORT).show();
        }
        catch (Exception e){
            Toast.makeText(context,"Error...", Toast.LENGTH_SHORT).show();
        }

        myPdfDocument.close();
        System.out.println("COmpleted");
        Toast.makeText(context,"PDF Created Successfully...", Toast.LENGTH_SHORT).show();



        //Open PDF


        Uri uri = FileProvider.getUriForFile(context, BuildConfig.APPLICATION_ID + ".provider",file);
        Intent pdfIntent = new Intent(Intent.ACTION_VIEW);
        pdfIntent.setDataAndType(uri, "application/pdf");
        pdfIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        pdfIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        try{

            context.startActivity(pdfIntent);
        }catch(ActivityNotFoundException e){
            Toast.makeText(context, "No Application available to view PDF", Toast.LENGTH_SHORT).show();
        }
    }






}
